{"version":3,"sources":["index.js","serviceWorker.js","App.js","../src lazy /^/.//.*$/ groupOptions: {} namespace object"],"names":["ReactDOM","render","StrictMode","document","getElementById","serviceWorker","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","message","App","useState","activTab","setActivTab","tabs","id","name","tabsItems","map","tab","label","key","Panel","lazy","position","value","onChange","event","newValue","fallback","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","e","Error","code","ids","all","slice","keys","Object","module","exports"],"mappings":"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","file":"static/js/main.6ba0ccc9.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, lazy, Suspense } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n\nfunction App() {\n  const [activTab, setActivTab] = useState(0);\n  const handleChange = (event, newValue) => {\n    setActivTab(newValue);\n  };\n\n  const tabs = [{ id: \"AddPlusBeforeWords\", name: \"Добавить +\" }];\n\n  const tabsItems = tabs.map((tab) => <Tab label={tab.name} key={tab.id} />);\n\n  const Panel = lazy(() => import(`./${tabs[activTab].id}`));\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Tabs value={activTab} onChange={handleChange}>\n          {tabsItems}\n        </Tabs>\n      </AppBar>\n      <Suspense fallback={<h1>Still Loading…</h1>}>\n          <Toolbar />\n          <Panel />\n      </Suspense>\n    </>\n  );\n}\n\nexport default App;\n","var map = {\n\t\"./\": [\n\t\t19\n\t],\n\t\"./AddPlusBeforeWords\": [\n\t\t38,\n\t\t0,\n\t\t1\n\t],\n\t\"./AddPlusBeforeWords.js\": [\n\t\t38,\n\t\t0,\n\t\t1\n\t],\n\t\"./App\": [\n\t\t21\n\t],\n\t\"./App.js\": [\n\t\t21\n\t],\n\t\"./index\": [\n\t\t19\n\t],\n\t\"./index.js\": [\n\t\t19\n\t],\n\t\"./serviceWorker\": [\n\t\t20\n\t],\n\t\"./serviceWorker.js\": [\n\t\t20\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 49;\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}